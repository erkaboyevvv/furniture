
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.13.0
 * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
 */
Prisma.prismaVersion = {
  client: "5.13.0",
  engine: "b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ColorsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.MaterialsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RoomTypesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.FurnitureTypesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.FurniturePhotosScalarFieldEnum = {
  id: 'id',
  furniture_id: 'furniture_id',
  url: 'url',
  caption: 'caption'
};

exports.Prisma.FurnitureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  produced_date: 'produced_date',
  colors_id: 'colors_id',
  materials_id: 'materials_id',
  roomTypes_id: 'roomTypes_id',
  furniture_types_id: 'furniture_types_id',
  description: 'description',
  height: 'height',
  width: 'width',
  price: 'price'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  full_name: 'full_name',
  birth_date: 'birth_date',
  phone_number: 'phone_number',
  email: 'email',
  hashed_password: 'hashed_password',
  hashed_refresh_token: 'hashed_refresh_token',
  activation_link: 'activation_link',
  is_active: 'is_active'
};

exports.Prisma.FurnitureCommentsScalarFieldEnum = {
  id: 'id',
  users_id: 'users_id',
  furniture_id: 'furniture_id',
  user_comment: 'user_comment'
};

exports.Prisma.FurnitureLikesScalarFieldEnum = {
  id: 'id',
  users_id: 'users_id',
  furniture_id: 'furniture_id'
};

exports.Prisma.AdminsScalarFieldEnum = {
  id: 'id',
  full_name: 'full_name',
  birth_date: 'birth_date',
  phone_number: 'phone_number',
  email: 'email',
  hashed_password: 'hashed_password',
  hashed_refresh_token: 'hashed_refresh_token',
  is_creator: 'is_creator'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  description: 'description'
};

exports.Prisma.AdminRolesScalarFieldEnum = {
  id: 'id',
  admins_id: 'admins_id',
  roles_id: 'roles_id'
};

exports.Prisma.UserCardScalarFieldEnum = {
  id: 'id',
  users_id: 'users_id',
  card_number: 'card_number',
  card_expiration: 'card_expiration',
  phone_number: 'phone_number'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  id: 'id',
  users_id: 'users_id',
  city: 'city',
  area: 'area',
  street: 'street',
  house: 'house',
  apartment_or_office: 'apartment_or_office',
  entrance: 'entrance',
  floor: 'floor',
  intercom_code: 'intercom_code'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  full_name: 'full_name',
  phone_number_1: 'phone_number_1',
  phone_number_2: 'phone_number_2',
  email: 'email',
  hashed_password: 'hashed_password',
  hashed_refresh_token: 'hashed_refresh_token',
  car_name: 'car_name',
  car_number: 'car_number',
  car_size: 'car_size'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  users_id: 'users_id',
  contracts_id: 'contracts_id',
  user_card_id: 'user_card_id',
  company_card: 'company_card',
  payment_amount: 'payment_amount',
  payment_status: 'payment_status',
  payment_date: 'payment_date'
};

exports.Prisma.ContractsScalarFieldEnum = {
  id: 'id',
  users_id: 'users_id',
  supplier_id: 'supplier_id',
  delivery_date: 'delivery_date',
  note_to_supplier: 'note_to_supplier',
  hours: 'hours',
  delivery_status: 'delivery_status'
};

exports.Prisma.ContractsDetailingScalarFieldEnum = {
  id: 'id',
  users_id: 'users_id',
  furniture_id: 'furniture_id',
  contracts_id: 'contracts_id',
  count: 'count',
  total_price: 'total_price',
  contract_date: 'contract_date'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Colors: 'Colors',
  Materials: 'Materials',
  RoomTypes: 'RoomTypes',
  FurnitureTypes: 'FurnitureTypes',
  FurniturePhotos: 'FurniturePhotos',
  Furniture: 'Furniture',
  Users: 'Users',
  FurnitureComments: 'FurnitureComments',
  FurnitureLikes: 'FurnitureLikes',
  Admins: 'Admins',
  Roles: 'Roles',
  AdminRoles: 'AdminRoles',
  UserCard: 'UserCard',
  UserAddress: 'UserAddress',
  Supplier: 'Supplier',
  Payment: 'Payment',
  Contracts: 'Contracts',
  ContractsDetailing: 'ContractsDetailing'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
